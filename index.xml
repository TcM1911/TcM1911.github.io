<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Playhouse</title>
    <link>/</link>
    <description>Recent content on Playhouse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Mar 2020 18:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Under the Hood: Orthrus</title>
      <link>/posts/go-under-the-hood-orthrus/</link>
      <pubDate>Mon, 23 Mar 2020 18:00:00 +0000</pubDate>
      
      <guid>/posts/go-under-the-hood-orthrus/</guid>
      <description>Orthrus is a crypto-mining malware targeting both Windows and Linux machines. One of the first analyses of the Linux version of the malware was published by Antiy in June 2019. Since then, the threat actor has evolved the malware to also infect Windows servers. Orthrus is made up of four different modules written in Powershell, shell script, and binary executables. The binary executables are written in Go (Golang) and the Linux and Windows versions or compiled from the same source code.</description>
    </item>
    
    <item>
      <title>Building Keybase for Raspberry Pi</title>
      <link>/posts/keybase-rpi/</link>
      <pubDate>Sun, 09 Feb 2020 12:00:00 +0000</pubDate>
      
      <guid>/posts/keybase-rpi/</guid>
      <description>The Raspberry Pi 4 is a nice little powerful device. The official Linux distribution for the Pi, Raspbian. Unfortunately, it doesn’t have any prebuilt binaries for Keybase. Neither are they provided by Keybase themselves. Luckily, building it from the source is relatively painless. With the new more powerful version 4 of the pi, the time it takes is somewhat reasonable.
The goal of this blog post is to show how to set up a build environment that doesn&amp;rsquo;t require root access to the machine.</description>
    </item>
    
    <item>
      <title>Go Under the Hood: Eris Ransomware</title>
      <link>/posts/go-under-the-hood-eris/</link>
      <pubDate>Sun, 06 Oct 2019 21:01:26 +0100</pubDate>
      
      <guid>/posts/go-under-the-hood-eris/</guid>
      <description>Eris ransomware was first discovered in May 2019. In July it was reported by Bleeping Computer that the malware was being distributed by the RIG exploit kit.
Here is a set of analysis notes for version two of the family. The sample used for the analysis has the hash of 99d19dd82330a1c437a64e7ca9896ad9d914de10c4f7aa2222b1a5bc4750f692
Malware overview Version two of the Eris ransomware are made up of six packages.
 Sync package used to collect victim information and send it to the operator.</description>
    </item>
    
    <item>
      <title>Extracting Type Information from a Go Binary</title>
      <link>/posts/extracting-go-types/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>/posts/extracting-go-types/</guid>
      <description>Introduction Go is a strongly typed language. This means that you can&amp;rsquo;t concatenate for example a string with an integer without first converting the integer to a string. For this to be enforced, there needs to be a way for the runtime to track all the different types. In terms of Go, all the types have a definition that is included in the binary. By parsing all of these type definitions, it is possible to reconstruct all the types inside the binary which can aid the analysis of a suspicious application/malware.</description>
    </item>
    
    <item>
      <title>Time For Some Function Recovery</title>
      <link>/posts/pclntab-function-recovery/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0100</pubDate>
      
      <guid>/posts/pclntab-function-recovery/</guid>
      <description>Time For Some Function Recovery Binaries compiled with the Go compiler includes a large set of metadata. This metadata can be used to assist static analysis of stripped binaries. Stripped binaries, especially statically compiled, are hard to analyze. Since the symbols have been removed and the huge number of subroutines, hello world binary in Go have thousands of subroutines, it can be very time-consuming. Fortunately, the metadata in the binary can be used to reconstruct symbols and also recover information about the source code layout.</description>
    </item>
    
    <item>
      <title>Say Hello to Moduledata</title>
      <link>/posts/hello-moduledata/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0100</pubDate>
      
      <guid>/posts/hello-moduledata/</guid>
      <description>Say Hello to Moduledata The moduledata structure is a data table that was first introduced in version 1.5 of Go. It is a structure that holds important information that is needed when you statically analyzing Go binaries. It records information about the layout of the executable. For ELF binaries, the structure can be found in the .noptrdata section. In PE files it is much harder to find. Sometimes it is located in the .</description>
    </item>
    
    <item>
      <title>Backdoor on Windows with Finger</title>
      <link>/posts/finger-windows-backdoor/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/finger-windows-backdoor/</guid>
      <description>Introduction This is a follow-up post to one of my presentations at BsidesSF 2019. It is also a continuation of a previous blog post where it showed how you can use WHOIS and Finger on Unix systems for backdoors. In this post, the focus will be on how it can similarly be done on a Windows system.
Finger comes pre-installed on Windows. According to Microsoft&amp;rsquo;s documentation, the options are very limited.</description>
    </item>
    
    <item>
      <title>Using Whois and Finger for Reverse Shells</title>
      <link>/posts/whois-and-finger-reverse-shell/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/whois-and-finger-reverse-shell/</guid>
      <description>Introduction In the presentation Fire &amp;amp; Ice: Making and Breaking macOS Firewalls, Patrick Wardle mentioned the idea of using binaries signed by Apple to by-pass firewall checks for outbound traffic. As an example, he mentioned whois. I thought it would be interesting to throw together a one-liner reverse shell that uses whois to do the socket handling. In addition to whois, what other system utilities can be used.
The Whois protocol The whois protocol is very simple TCP-based query/response protocol.</description>
    </item>
    
    <item>
      <title>Create YARA Rules with Radare</title>
      <link>/posts/create-yara-rules-with-radare/</link>
      <pubDate>Sat, 09 Jun 2018 20:37:47 +0000</pubDate>
      
      <guid>/posts/create-yara-rules-with-radare/</guid>
      <description>Introduction This post is showing how Radare’s Zignatures can be used to create YARA rules. The YARA rules generated can be used to find other malware samples that have the same or similar code.
Yara YARA was created by Victor Alvarez of Virustotal and is a tool used by malware researchers to identify and classify samples. YARA rules consist of string or byte patterns together with set conditions. When the conditions are met, a match is found.</description>
    </item>
    
    <item>
      <title>Malware Analysis using Malboxes</title>
      <link>/posts/malware-analysis-using-malboxes/</link>
      <pubDate>Mon, 30 Apr 2018 10:59:00 +0100</pubDate>
      
      <guid>/posts/malware-analysis-using-malboxes/</guid>
      <description>A while back I came across two projects that automate the creation of virtual machines for malware analysis. The original open source project what uses Packer and Vagrant to bootstrap a malware lab can be found here. As part of this blog post, I will instead use malboxes from GoSecure as it suits my need more.
Malboxes creates a Windows VM template using packer. The template will have tools installed.</description>
    </item>
    
  </channel>
</rss>