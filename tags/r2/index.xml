<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r2 on Playhouse</title>
    <link>/tags/r2/</link>
    <description>Recent content in r2 on Playhouse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Jan 2021 12:00:00 +0000</lastBuildDate><atom:link href="/tags/r2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tackle Inline Go Functions</title>
      <link>/posts/go-inline-code/</link>
      <pubDate>Sat, 02 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>/posts/go-inline-code/</guid>
      <description>The Problem Within the last few releases, the Go compiler has gotten better at inlining smaller functions. This can sometimes make it harder when analyzing an unknown Go binary with a disassembler. Instead of seeing a call to a documented library function, the library function&amp;rsquo;s code has been &amp;ldquo;merged&amp;rdquo; with the caller and it is easy to waste time trying to decipher the library code when just reading the documentation would have been faster.</description>
    </item>
    
    <item>
      <title>Create YARA Rules with Radare</title>
      <link>/posts/create-yara-rules-with-radare/</link>
      <pubDate>Sat, 09 Jun 2018 20:37:47 +0000</pubDate>
      
      <guid>/posts/create-yara-rules-with-radare/</guid>
      <description>Introduction This post is showing how Radareâ€™s Zignatures can be used to create YARA rules. The YARA rules generated can be used to find other malware samples that have the same or similar code.
Yara YARA was created by Victor Alvarez of Virustotal and is a tool used by malware researchers to identify and classify samples. YARA rules consist of string or byte patterns together with set conditions. When the conditions are met, a match is found.</description>
    </item>
    
  </channel>
</rss>
