<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Playhouse</title>
    <link>/tags/go/</link>
    <description>Recent content in go on Playhouse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Oct 2019 21:01:26 +0100</lastBuildDate>
    
	<atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go under the hood: Eris Ransomware</title>
      <link>/posts/go-under-the-hood-eris/</link>
      <pubDate>Sun, 06 Oct 2019 21:01:26 +0100</pubDate>
      
      <guid>/posts/go-under-the-hood-eris/</guid>
      <description>Eris ransomware was first discovered in May 2019. In July it was reported by Bleeping Computer that the malware was being distributed by the RIG exploit kit.
Here is a set of analysis notes for version two of the family. The sample used for the analysis has the hash of 99d19dd82330a1c437a64e7ca9896ad9d914de10c4f7aa2222b1a5bc4750f692
Malware overview Version two of the Eris ransomware are made up of six packages.
 Sync package used to collect victim information and send it to the operator.</description>
    </item>
    
    <item>
      <title>Time For Some Function Recovery</title>
      <link>/posts/pclntab-function-recovery/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0100</pubDate>
      
      <guid>/posts/pclntab-function-recovery/</guid>
      <description>Time For Some Function Recovery Binaries compiled with the Go compiler includes a large set of metadata. This metadata can be used to assist static analysis of stripped binaries. Stripped binaries, especially statically compiled, are hard to analyze. Since the symbols have been removed and the huge number of subroutines, hello world binary in Go have thousands of subroutines, it can be very time-consuming. Fortunately, the metadata in the binary can be used to reconstruct symbols and also recover information about the source code layout.</description>
    </item>
    
    <item>
      <title>Say Hello to Moduledata</title>
      <link>/posts/hello-moduledata/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0100</pubDate>
      
      <guid>/posts/hello-moduledata/</guid>
      <description>Say Hello to Moduledata The moduledata structure is a data table that was first introduced in version 1.5 of Go. It is a structure that holds important information that is needed when you statically analyzing Go binaries. It records information about the layout of the executable. For ELF binaries, the structure can be found in the .noptrdata section. In PE files it is much harder to find. Sometimes it is located in the .</description>
    </item>
    
  </channel>
</rss>