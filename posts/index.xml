<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Playhouse</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Playhouse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Jun 2019 00:00:00 +0100</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Say Hello to Moduledata</title>
      <link>/posts/hello-moduledata/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0100</pubDate>
      
      <guid>/posts/hello-moduledata/</guid>
      <description>Say Hello to Moduledata The moduledata structure is a data table that was first introduced in version 1.5 of Go. It is a structure that holds important information that is needed when you statically analyzing Go binaries. It records information about the layout of the executable. For ELF binaries, the structure can be found in the .noptrdata section. In PE files it is much harder to find. Sometimes it is located in the .</description>
    </item>
    
    <item>
      <title>Backdoor on windows with finger</title>
      <link>/posts/finger-windows-backdoor/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/finger-windows-backdoor/</guid>
      <description>Introduction This is a follow-up post to one of my presentations at BsidesSF 2019. It is also a continuation of a previous blog post where it showed how you can use WHOIS and Finger on Unix systems for backdoors. In this post, the focus will be on how it can similarly be done on a Windows system.
Finger comes pre-installed on Windows. According to Microsoft&amp;rsquo;s documentation, the options are very limited.</description>
    </item>
    
    <item>
      <title>Using Whois and Finger for reverse shells</title>
      <link>/posts/whois-and-finger-reverse-shell/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/whois-and-finger-reverse-shell/</guid>
      <description>Introduction In the presentation Fire &amp;amp; Ice: Making and Breaking macOS Firewalls, Patrick Wardle mentioned the idea of using binaries signed by Apple to by-pass firewall checks for outbound traffic. As an example, he mentioned whois. I thought it would be interesting to throw together a one-liner reverse shell that uses whois to do the socket handling. In addition to whois, what other system utilities can be used.
The Whois protocol The whois protocol is very simple TCP-based query/response protocol.</description>
    </item>
    
    <item>
      <title>Create YARA Rules With Radare</title>
      <link>/posts/create-yara-rules-with-radare/</link>
      <pubDate>Sat, 09 Jun 2018 20:37:47 +0000</pubDate>
      
      <guid>/posts/create-yara-rules-with-radare/</guid>
      <description>Introduction This post is showing how Radareâ€™s Zignatures can be used to create YARA rules. The YARA rules generated can be used to find other malware samples that have the same or similar code.
Yara YARA was created by Victor Alvarez of Virustotal and is a tool used by malware researchers to identify and classify samples. YARA rules consist of string or byte patterns together with set conditions. When the conditions are met, a match is found.</description>
    </item>
    
    <item>
      <title>Malware Analysis using Malboxes</title>
      <link>/posts/malware-analysis-using-malboxes/</link>
      <pubDate>Mon, 30 Apr 2018 10:59:00 +0100</pubDate>
      
      <guid>/posts/malware-analysis-using-malboxes/</guid>
      <description>A while back I came across two projects that automate the creation of virtual machines for malware analysis. The original open source project what uses Packer and Vagrant to bootstrap a malware lab can be found here. As part of this blog post, I will instead use malboxes from GoSecure as it suits my need more.
Malboxes creates a Windows VM template using packer. The template will have tools installed.</description>
    </item>
    
  </channel>
</rss>